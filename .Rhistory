#WT_means<- ColMean_funct(WT_df)
#combine the means to create matrix for function3
TotalMeans<- cbind(Het_means, KO_means, WT_means)
barplot_funct<- function(matrix){
bar.plot<- barplot(matrix, width= 0.01, beside=TRUE, main='Mean Flow Cytometry Cell Count', xlab='Cell Types (WT, Het, KO)', ylab="Cell Count (%)", col=topo.colors(12))
legend("topright", ncol=4, cex=0.75, inset=.02, title="Cell Type", c("C1","C2","C3","C4", "C5", "C6", "C7", "C8", "C9","C10", "C11", "C12"), fill=topo.colors(12))
return(bar.plot)
}
barplot_funct<- function(matrix){
bar.plot<- barplot(matrix, width= 0.01, beside=TRUE, main='Mean Flow Cytometry Cell Count', xlab='Cell Types (WT, Het, KO)', ylab="Cell Count (%)", col=topo.colors(12))
legend("topright", ncol=4, cex=0.75, inset=.02, title="Cell Type", c("C1","C2","C3","C4", "C5", "C6", "C7", "C8", "C9","C10", "C11", "C12"), fill=topo.colors(12))
return(bar.plot)
}
barplot_funct<- function(matrix){
bar.plot<- barplot(matrix, width= 0.01, beside=TRUE, main='Mean Flow Cytometry Cell Count', xlab='Cell Types (WT, Het, KO)', ylab="Cell Count (%)", col=topo.colors(12))
legend("topright", ncol=4, cex=0.75, inset=.02, title="Cell Type", c("C1","C2","C3","C4", "C5", "C6", "C7", "C8", "C9","C10", "C11", "C12"), fill=topo.colors(12))
return(bar.plot)
}
barplot_funct(TotalMeans)
#Het_means<- ColMean_funct(Het_df)
#KO_means<- ColMean_funct(KO_df)
#WT_means<- ColMean_funct(WT_df)
##combine the means to create matrix for function3
TotalMeans<- cbind(Het_means, KO_means, WT_means)
barplot_funct<- function(matrix){
bar.plot<- barplot(matrix, width= 0.01, beside=TRUE, main='Mean Flow Cytometry Cell Count', xlab='Cell Types (WT, Het, KO)', ylab="Cell Count (%)", col=topo.colors(12))
legend("topright", ncol=4, cex=0.75, inset=.02, title="Cell Type", c("C1","C2","C3","C4", "C5", "C6", "C7", "C8", "C9","C10", "C11", "C12"), fill=topo.colors(12))
return(bar.plot)
}
barplot_funct(TotalMeans)
Het_means<- ColMean_funct(Het_df)
KO_means<- ColMean_funct(KO_df)
WT_means<- ColMean_funct(WT_df)
##combine the means to create matrix for function3
TotalMeans<- cbind(Het_means, KO_means, WT_means)
library(MeanFlowData)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(MeanFlowData)
Split_Gen_Funct<- function(df, vect){
Split_Genotype.df<- split(df, vect)
return(Split_Genotype.df)
}
#Split_Genotype_list<- Split_Gen_Funct(SC_Data, SC_Data$Genotype )
#convert the separated list into dataframes
#Het_df<- as.data.frame(Split_Genotype_list[[1]])
#KO_df<- as.data.frame(Split_Genotype_list[[2]])
#WT_df<- as.data.frame(Split_Genotype_list[[3]])
#remove first two columns so we can take the mean of each column:
#Het_df<- Het_df[3:14]
#KO_df<- KO_df[3:14]
#WT_df<- WT_df[3:14]
ColMean_funct<- function(df){
Col_Means_df<- colMeans(df)
return(Col_Means_df)
}
Het_means<- ColMean_funct(Het_df)
KO_means<- ColMean_funct(KO_df)
WT_means<- ColMean_funct(WT_df)
##combine the means to create matrix for function3
TotalMeans<- cbind(Het_means, KO_means, WT_means)
barplot_funct<- function(matrix){
bar.plot<- barplot(matrix, width= 0.01, beside=TRUE, main='Mean Flow Cytometry Cell Count', xlab='Cell Types (WT, Het, KO)', ylab="Cell Count (%)", col=topo.colors(12))
legend("topright", ncol=4, cex=0.75, inset=.02, title="Cell Type", c("C1","C2","C3","C4", "C5", "C6", "C7", "C8", "C9","C10", "C11", "C12"), fill=topo.colors(12))
return(bar.plot)
}
barplot_funct(TotalMeans)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(MeanFlowData)
Split_Gen_Funct<- function(df, vect){
Split_Genotype.df<- split(df, vect)
return(Split_Genotype.df)
}
#Split_Genotype_list<- Split_Gen_Funct(SC_Data, SC_Data$Genotype )
#convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[[1]])
KO_df<- as.data.frame(Split_Genotype_list[[2]])
WT_df<- as.data.frame(Split_Genotype_list[[3]])
#remove first two columns so we can take the mean of each column:
Het_df<- Het_df[3:14]
KO_df<- KO_df[3:14]
WT_df<- WT_df[3:14]
#Split_Genotype_list<- Split_Gen_Funct(SC_Data, SC_Data$Genotype )
#convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[[1]])
KO_df<- as.data.frame(Split_Genotype_list[[2]])
WT_df<- as.data.frame(Split_Genotype_list[[3]])
#remove first two columns so we can take the mean of each column:
Het_df<- Het_df[3:14]
KO_df<- KO_df[3:14]
WT_df<- WT_df[3:14]
Split_Gen_Funct<- function(df, vect){
Split_Genotype.df<- split(df, vect)
return(Split_Genotype.df)
}
#Split_Genotype_list<- Split_Gen_Funct(SC_Data, SC_Data$Genotype )
#convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[[1]])
KO_df<- as.data.frame(Split_Genotype_list[[2]])
WT_df<- as.data.frame(Split_Genotype_list[[3]])
#remove first two columns so we can take the mean of each column:
Het_df<- Het_df[3:14]
KO_df<- KO_df[3:14]
WT_df<- WT_df[3:14]
ColMean_funct<- function(df){
Col_Means_df<- colMeans(df)
return(Col_Means_df)
}
Het_means<- ColMean_funct(Het_df)
KO_means<- ColMean_funct(KO_df)
WT_means<- ColMean_funct(WT_df)
##combine the means to create matrix for function3
TotalMeans<- cbind(Het_means, KO_means, WT_means)
barplot_funct<- function(matrix){
bar.plot<- barplot(matrix, width= 0.01, beside=TRUE, main='Mean Flow Cytometry Cell Count', xlab='Cell Types (WT, Het, KO)', ylab="Cell Count (%)", col=topo.colors(12))
legend("topright", ncol=4, cex=0.75, inset=.02, title="Cell Type", c("C1","C2","C3","C4", "C5", "C6", "C7", "C8", "C9","C10", "C11", "C12"), fill=topo.colors(12))
return(bar.plot)
}
barplot_funct(TotalMeans)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(MeanFlowData)
Split_Gen_Funct<- function(df, vect){
Split_Genotype.df<- split(df, vect)
return(Split_Genotype.df)
}
#Split_Genotype_list<- Split_Gen_Funct(SC_Data, SC_Data$Genotype )
#convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[[1]])
ColMean_funct<- function(df){
Col_Means_df<- colMeans(df)
return(Col_Means_df)
}
Split_Genotype_list<- Split_Gen_Funct(SC_Data, SC_Data$Genotype )
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(MeanFlowData)
Split_Gen_Funct<- function(df, vect){
Split_Genotype.df<- split(df, vect)
return(Split_Genotype.df)
}
Split_Genotype_list<- Split_Gen_Funct(SC_Data, SC_Data[Genotype] )
Split_Genotype_list<- Split_Gen_Funct(SC_Data, SC_Data[Genotype])
Split_Genotype_list<- Split_Gen_Funct(SC_Data, "Genotype")
#convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[[1]])
KO_df<- as.data.frame(Split_Genotype_list[[2]])
Split_Genotype_list<- Split_Gen_Funct(SC_Data, "Genotype")
#convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[1])
KO_df<- as.data.frame(Split_Genotype_list[2])
WT_df<- as.data.frame(Split_Genotype_list[3])
#remove first two columns so we can take the mean of each column:
Het_df<- Het_df[3:14]
Split_Genotype_list<- Split_Gen_Funct(SC_Data, "Genotype")
#convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[1])
KO_df<- as.data.frame(Split_Genotype_list[2])
WT_df<- as.data.frame(Split_Genotype_list[3])
#remove first two columns so we can take the mean of each column:
Het_df<- Het_df(3:14)
Split_Genotype_list<- Split_Gen_Funct(SC_Data, "Genotype")
#convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[1])
KO_df<- as.data.frame(Split_Genotype_list[2])
WT_df<- as.data.frame(Split_Genotype_list[3])
#remove first two columns so we can take the mean of each column:
Het_df<- Het_df 3:14
Split_Genotype_list<- Split_Gen_Funct(SC_Data, "Genotype")
#convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[1])
KO_df<- as.data.frame(Split_Genotype_list[2])
WT_df<- as.data.frame(Split_Genotype_list[3])
#remove first two columns so we can take the mean of each column:
Het_df<- Het_df [3:14]
Split_Genotype_list<- Split_Gen_Funct(SC_Data, "Genotype")
#convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[1])
KO_df<- as.data.frame(Split_Genotype_list[2])
WT_df<- as.data.frame(Split_Genotype_list[3])
#remove first two columns so we can take the mean of each column:
Het_df<- Het_df [3:14,]
KO_df<- KO_df [3:14,]
WT_df<- WT_df [3:14,]
ColMean_funct<- function(df){
Col_Means_df<- colMeans(df)
return(Col_Means_df)
}
Het_means<- ColMean_funct(Het_df)
Het_means<- ColMean_funct(Het_df)
Het_means<- ColMean_funct(Het_df,)
Het_means<- ColMean_funct(Het_df)
Split_Genotype_list<- Split_Gen_Funct(SC_Data, "Genotype")
#convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[1])
KO_df<- as.data.frame(Split_Genotype_list[2])
WT_df<- as.data.frame(Split_Genotype_list[3])
#remove first two columns so we can take the mean of each column:
Het_df<- Het_df [3:14,]
KO_df<- KO_df [3:14,]
WT_df<- WT_df [3:14,]
ColMean_funct<- function(df){
Col_Means_df<- colMeans(df)
return(Col_Means_df)
}
Split_Genotype_list<- Split_Gen_Funct(SC_Data, "Genotype")
#convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[1])
KO_df<- as.data.frame(Split_Genotype_list[2])
WT_df<- as.data.frame(Split_Genotype_list[3])
#remove first two columns so we can take the mean of each column:
Het_df<- Het_df[3:14,]
KO_df<- KO_df [3:14,]
WT_df<- WT_df [3:14,]
Split_Genotype_list<- Split_Gen_Funct(SC_Data, "Genotype")
#convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[1])
KO_df<- as.data.frame(Split_Genotype_list[2])
WT_df<- as.data.frame(Split_Genotype_list[3])
#remove first two columns so we can take the mean of each column:
Het_df<- Het_df[3:14,]
KO_df<- KO_df [3:14,]
WT_df<- WT_df [3:14,]
Het_df<- as.data.frame(Het_df)
Het_means<- ColMean_funct(Het_df)
Het_df<- as.numeric(Het_df)
Split_Genotype_list<- Split_Gen_Funct(SC_Data, "Genotype")
#convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[1])
KO_df<- as.data.frame(Split_Genotype_list[2])
WT_df<- as.data.frame(Split_Genotype_list[3])
#remove first two columns so we can take the mean of each column:
Het_df<- Het_df[3:14,]
KO_df<- KO_df [3:14,]
WT_df<- WT_df [3:14,]
ColMean_funct<- function(df){
Col_Means_df<- colMeans(df)
return(Col_Means_df)
}
Het_means<- ColMean_funct(Het_df)
Split_Genotype_list<- Split_Gen_Funct(SC_Data, "Genotype")
#convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[1])
KO_df<- as.data.frame(Split_Genotype_list[2])
WT_df<- as.data.frame(Split_Genotype_list[3])
#remove first two columns so we can take the mean of each column:
Het_df<- Het_df[3:14,]
KO_df<- KO_df [3:14,]
WT_df<- WT_df [3:14,]
SC_Data<- read.csv("C:/Users/miaco/Documents/DataAnalysisWithR/MeanFlowData/SC_Data.csv", "Character")
SC_Data<- read.csv("C:/Users/miaco/Documents/DataAnalysisWithR/MeanFlowData/SC_Data.csv", header = TRUE)
SC_Data<- read.csv("C:/Users/miaco/Documents/DataAnalysisWithR/MeanFlowData/SC_Data.csv", header = TRUE)
setwd("MeanFlowData")
use_data(SC_Data)
overwrite=TRUE
fastdemo<- Split_Gen_Funct(SC_Data, "[0-9.]+")
use_vignette("MeanFlowDatavignette")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(MeanFlowData)
Split_Gen_Funct<- function(df, vect){
Split_Genotype.df<- split(df, vect)
return(Split_Genotype.df)
}
Split_Genotype_list<- Split_Gen_Funct(SC_Data, "Genotype")
#convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[1])
KO_df<- as.data.frame(Split_Genotype_list[2])
WT_df<- as.data.frame(Split_Genotype_list[3])
#remove first two columns so we can take the mean of each column:
Het_df<- Het_df[3:14,]
KO_df<- KO_df [3:14,]
WT_df<- WT_df [3:14,]
ColMean_funct<- function(df){
Col_Means_df<- colMeans(df)
return(Col_Means_df)
}
Het_means<- ColMean_funct(Het_df)
barplot_funct<- function(matrix){
bar.plot<- barplot(matrix, width= 0.01, beside=TRUE, main='Mean Flow Cytometry Cell Count', xlab='Cell Types (WT, Het, KO)', ylab="Cell Count (%)", col=topo.colors(12))
legend("topright", ncol=4, cex=0.75, inset=.02, title="Cell Type", c("C1","C2","C3","C4", "C5", "C6", "C7", "C8", "C9","C10", "C11", "C12"), fill=topo.colors(12))
return(bar.plot)
}
barplot_funct(TotalMeans)
barplot_funct<- function(matrix){
bar.plot<- barplot(matrix, width= 0.01, beside=TRUE, main='Mean Flow Cytometry Cell Count', xlab='Cell Types (WT, Het, KO)', ylab="Cell Count (%)", col=topo.colors(12))
legend("topright", ncol=4, cex=0.75, inset=.02, title="Cell Type", c("C1","C2","C3","C4", "C5", "C6", "C7", "C8", "C9","C10", "C11", "C12"), fill=topo.colors(12))
return(bar.plot)
}
Het_means<- ColMean_funct(Het_df)
Split_Genotype_list<- Split_Gen_Funct(SC_Data, "Genotype")
#convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[1])
KO_df<- as.data.frame(Split_Genotype_list[2])
WT_df<- as.data.frame(Split_Genotype_list[3])
#remove first two columns so we can take the mean of each column:
Het_df<- Het_df[3:14,]
KO_df<- KO_df [3:14,]
WT_df<- WT_df [3:14,]
library(MeanFlowData)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(MeanFlowData)
Split_Gen_Funct<- function(df, vect){
Split_Genotype.df<- split(df, vect)
return(Split_Genotype.df)
}
Split_Genotype_list<- Split_Gen_Funct(SC_Data, "Genotype")
#convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[1])
KO_df<- as.data.frame(Split_Genotype_list[2])
WT_df<- as.data.frame(Split_Genotype_list[3])
#remove first two columns so we can take the mean of each column:
Het_df<- Het_df[3:14,]
KO_df<- KO_df [3:14,]
WT_df<- WT_df [3:14,]
ColMean_funct<- function(df){
Col_Means_df<- colMeans(df)
return(Col_Means_df)
}
Split_Genotype_list<- Split_Gen_Funct(SC_Data, "Genotype")
#convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[[1]])
KO_df<- as.data.frame(Split_Genotype_list[2])
WT_df<- as.data.frame(Split_Genotype_list[3])
#remove first two columns so we can take the mean of each column:
Het_df<- Het_df[3:14,]
KO_df<- KO_df [3:14,]
WT_df<- WT_df [3:14,]
ColMean_funct<- function(df){
Col_Means_df<- colMeans(df)
return(Col_Means_df)
}
Het_means<- ColMean_funct(Het_df)
Split_Genotype_list<- Split_Gen_Funct(SC_Data, "Genotype")
#convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[[1]])
KO_df<- as.data.frame(Split_Genotype_list[2])
WT_df<- as.data.frame(Split_Genotype_list[3])
#remove first two columns so we can take the mean of each column:
Het_df<- Het_df[3:14,]
KO_df<- KO_df [3:14,]
WT_df<- WT_df [3:14,]
#convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[[1]])
ColMean_funct<- function(df){
Col_Means_df<- colMeans(df)
return(Col_Means_df)
}
Het_means<- ColMean_funct(Het_df)
SC_Data<- read.csv("C:/Users/miaco/Documents/DataAnalysisWithR/MeanFlowData/SC_Data.csv", header = TRUE)
Split_Genotype_list<- Split_Gen_Funct(SC_Data, SC_Data$Genotype)
#mainScript to convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[[1]])
KO_df<- as.data.frame(Split_Genotype_list[[2]])
WT_df<- as.data.frame(Split_Genotype_list[[3]])
#remove first two columns so we can take the mean of each column:
Het_df<- Het_df[3:14]
KO_df<- KO_df[3:14]
WT_df<- WT_df[3:14]
#call the function and create a matrix for each mean set
Het_means<- ColMean_funct(Het_df)
KO_means<- ColMean_funct(KO_df)
WT_means<- ColMean_funct(WT_df)
#combine the means to create matrix for function3
TotalMeans<- cbind(Het_means, KO_means, WT_means)
#Call function to create graph
barplot_funct(TotalMeans)
source('~/DataAnalysisWithR/FinalPackage_MC/MeanFlowData/R/Final_Package_MainScript.R')
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(MeanFlowData)
Split_Gen_Funct<- function(df, vect){
Split_Genotype.df<- split(df, vect)
return(Split_Genotype.df)
}
Split_Genotype_list<- Split_Gen_Funct(SC_Data, SC_Data$Genotype)
#mainScript to convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[[1]])
KO_df<- as.data.frame(Split_Genotype_list[[2]])
WT_df<- as.data.frame(Split_Genotype_list[[3]])
#remove first two columns so we can take the mean of each column:
Het_df<- Het_df[3:14]
KO_df<- KO_df[3:14]
WT_df<- WT_df[3:14]
ColMean_funct<- function(df){
Col_Means_df<- colMeans(df)
return(Col_Means_df)
}
Split_Genotype_list<- Split_Gen_Funct(SC_Data, SC_Data$Genotype)
#mainScript to convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[[1]])
KO_df<- as.data.frame(Split_Genotype_list[[2]])
WT_df<- as.data.frame(Split_Genotype_list[[3]])
#remove first two columns so we can take the mean of each column:
Het_df<- Het_df[3:14]
KO_df<- KO_df[3:14]
WT_df<- WT_df[3:14]
ColMean_funct<- function(df){
Col_Means_df<- colMeans(df)
return(Col_Means_df)
}
#call the function and create a matrix for each mean set
Het_means<- ColMean_funct(Het_df)
KO_means<- ColMean_funct(KO_df)
WT_means<- ColMean_funct(WT_df)
#combine the means to create matrix for function3
TotalMeans<- cbind(Het_means, KO_means, WT_means)
barplot_funct<- function(matrix){
bar.plot<- barplot(matrix, width= 0.01, beside=TRUE, main='Mean Flow Cytometry Cell Count', xlab='Cell Types (WT, Het, KO)', ylab="Cell Count (%)", col=topo.colors(12))
legend("topright", ncol=4, cex=0.75, inset=.02, title="Cell Type", c("C1","C2","C3","C4", "C5", "C6", "C7", "C8", "C9","C10", "C11", "C12"), fill=topo.colors(12))
return(bar.plot)
}
barplot_funct(TotalMeans)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(MeanFlowData)
Split_Gen_Funct<- function(df, vect){
Split_Genotype.df<- split(df, vect)
return(Split_Genotype.df)
}
Split_Genotype_list<- Split_Gen_Funct(SC_Data, "Genotype")
#mainScript to convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[[1]])
KO_df<- as.data.frame(Split_Genotype_list[[2]])
ColMean_funct<- function(df){
Col_Means_df<- colMeans(df)
return(Col_Means_df)
}
#call the function and create a matrix for each mean set
Het_means<- ColMean_funct(Het_df)
barplot_funct<- function(matrix){
bar.plot<- barplot(matrix, width= 0.01, beside=TRUE, main='Mean Flow Cytometry Cell Count', xlab='Cell Types (WT, Het, KO)', ylab="Cell Count (%)", col=topo.colors(12))
legend("topright", ncol=4, cex=0.75, inset=.02, title="Cell Type", c("C1","C2","C3","C4", "C5", "C6", "C7", "C8", "C9","C10", "C11", "C12"), fill=topo.colors(12))
return(bar.plot)
}
barplot_funct(TotalMeans)
Split_Genotype_list<- Split_Gen_Funct(SC_Data, "Genotype")
#mainScript to convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[[1]])
KO_df<- as.data.frame(Split_Genotype_list[2])
WT_df<- as.data.frame(Split_Genotype_list[3])
#remove first two columns so we can take the mean of each column:
Het_df<- Het_df[3:14,]
KO_df<- KO_df[3:14,]
WT_df<- WT_df[3:14,]
#call the function and create a matrix for each mean set
Het_means<- as.numeric(Het_means)
Het_means<- ColMean_funct(Het_df)
#call the function and create a matrix for each mean set
Het_df<- as.numeric(Het_df)
#call the function and create a matrix for each mean set
Het_means<- ColMean_funct(Het_df)
#call the function and create a matrix for each mean set
Het_means<- ColMean_funct(Het_df)
#call the function and create a matrix for each mean set
Het_means<- ColMean_funct(Het_df)
#call the function and create a matrix for each mean set
Het_means<- ColMean_funct(Het_df)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(MeanFlowData)
Split_Gen_Funct<- function(df, vect){
Split_Genotype.df<- split(df, vect)
return(Split_Genotype.df)
}
Split_Genotype_list<- Split_Gen_Funct(SC_Data, "Genotype")
#mainScript to convert the separated list into dataframes
Het_df<- as.data.frame(Split_Genotype_list[[1]])
KO_df<- as.data.frame(Split_Genotype_list[2])
WT_df<- as.data.frame(Split_Genotype_list[3])
#remove first two columns so we can take the mean of each column:
Het_df<- Het_df[3:14,]
KO_df<- KO_df[3:14,]
WT_df<- WT_df[3:14,]
ColMean_funct<- function(df){
Col_Means_df<- colMeans(df)
return(Col_Means_df)
}
#call the function and create a matrix for each mean set
Het_means<- ColMean_funct(Het_df)
#call the function and create a matrix for each mean set
Het_means<- ColMean_funct(Het_df)
barplot_funct<- function(matrix){
bar.plot<- barplot(matrix, width= 0.01, beside=TRUE, main='Mean Flow Cytometry Cell Count', xlab='Cell Types (WT, Het, KO)', ylab="Cell Count (%)", col=topo.colors(12))
legend("topright", ncol=4, cex=0.75, inset=.02, title="Cell Type", c("C1","C2","C3","C4", "C5", "C6", "C7", "C8", "C9","C10", "C11", "C12"), fill=topo.colors(12))
return(bar.plot)
}
barplot_funct(TotalMeans)
View(WT_df)
View(KO_df)
View(Split_Genotype_list)
View(WT_df)
